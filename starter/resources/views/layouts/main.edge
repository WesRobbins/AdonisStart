<!DOCTYPE HTML>
<!--
	Stellar by HTML5 UP
	html5up.net | @ajlkn
	Free for personal and commercial use under the CCA 3.0 license (html5up.net/license)
-->
<html>
	<head>
		<title>SpecailProject.io Comment API</title>
		<meta charset="utf-8" />
		<meta name="viewport" content="width=device-width, initial-scale=1, user-scalable=no" />
		<link rel="stylesheet" href="/assets/css/main.css" />
		<noscript><link rel="stylesheet" href="/assets/css/noscript.css" /></noscript>
	</head>
	<body class="is-preload">

		<!-- Wrapper -->
			<div id="wrapper">

				<!-- Header -->
					<header id="header" class="alt">
						<span class="logo"><img src="logo.svg" alt="" /></span>
						<h1>Comment API</h1>
						<p>Johnny Egan | Wes Robbins | Spencer Reap<br /></p>
					</header>

				<!-- Nav -->
					<nav id="nav">
						<ul>
							<li><a href="#intro" class="active">Home</a></li>
							<li><a href="#first">User Documentation</a></li>
							<li><a href="#second">Developer Documentation</a></li>
							<li><a href="#third">Comment API</a></li>
						</ul>
					</nav>

				<!-- Main -->
					<div id="main">

						<!-- Introduction -->
						<section id="intro" class="main">
							<div class="spotlight">
								<div class="content">
									<header class="major">
										<h2>Comment API</h2>
									</header>
									<p>
										For our Software Engineering Senior Capstone our class was approached
										by a local Bozeman startup, SpecialProject. In their own words SpecailProject
										offers a platform that is, “helping video creators and independent studios earn
										subscription revenue and reach audiences worldwide.” We were asked to build a
										commenting API. The API allows the user to access functions such as comment,
										upvote, downvote, and reply to a comment on a SpecialProject post. The API
										populates a live database hosted by the school server which is then accessed
										by the SpecialProject team and implemented into their interface.

									</p>
								</div>
							</div>
						</section>


						<!-- First Section -->
							<section id="first" class="main special">
								<header class="major">
									<h2>User Documentation</h2>
								</header>
								<body>
									<br>
									<p> <b>Summary:</b>The goal of the API is a commenting interface for SpecialProjects's site where their
									  users can comment, reply, like, etc. content on there site. The commenting API will use
									  SpecialProject's UUIDs' (universally unique identifier) to identify the users and their
									  required information. The API should work similarly to the reddit commenting interface
									  with nested comment replys.
									</p>
									<br>
									<p>
									  The data such as the comments and the users linked to them will be stored on a live database
									  provided by MSU. MSU will also host the live API URL.
									  <br>
									  <br>
									  <b>Main page URL:</b> http://esof423.cs.montana.edu:4013
									<p>
									  <br>
									  Postman will be used as the API devlepement tool for reqeusts
									  to and and from the API to the SpecialProject site.
									  <br>
									  <br>

									  <b>SpecialProject will use the provdided URL's to call different functions:</b>
									  <br>
									  <ul>
										<li><b>Add Comment:</b> http://esof423.cs.montana.edu:4013/add</li>
											<p style="margin-left: 40px"> By using the above link the user will be able to
													successfully add a comment to the database, with the option to edit
													their post. Once the post has been added, users will be able to
													checkout comments by adding /edit/post id number to the existing URL through
													which is accessed by a post request</p>
										<li><b>Upvote:</b> http://esof423.cs.montana.edu:4013/upvote</li>
											<p style="margin-left: 40px">The comment rating can be increased by using the above URL
				                  by including the post id number in the form /post id. Once the
				                  link has been entered and run, the comments rating will then be updated
				                  through a get request and be visible with the comment.</p>
										<li><b>Downvote:</b> http://esof423.cs.montana.edu:4013/downvote</li>
											<p style="margin-left: 40px">The comment rating can be reduced by using the above URL
				                  by including the post id number in the form /post id. Once the
				                  link has been entered and run, the comments rating will then be updated
				                  through a get request and be visible with the comment.</p>
										<li><b>Delete Comment:</b> http://esof423.cs.montana.edu:4013/delete</li>
											<p style="margin-left: 40px">Deleting the comment will work similar to the voting system
				              through get requests when using the URL above with the /post id extension
				              added. </p>
									  </ul>


									</p>
									<!-- <table class="table table-striped">
										<thead>
											<tr>
												<th scope="col">Function</th>
												<th scope="col">HTTP Type</th>
												<th scope="col">URL</th>
												<th scope="col">Descrition</th>

											</tr>
										</thead>
										<tbody>
											<tr>
												<td>Get Comments by Post</td>
												<td>GET</td>
												<td>http://esof423.cs.montana.edu:4013/getposts/:id</td>
												<td>return all comments in JSON from specified post id</td>
											</tr>
											<tr>
												<td>Upvote</td>
												<td>GET</td>
												<td>http://esof423.cs.montana.edu:4013/upvote/:id</td>
												<td>increments upvote count of specified post and return home page</td>
											</tr>
											<tr>
												<td>Downvote</td>
												<td>GET</td>
												<td>http://esof423.cs.montana.edu:4013/downvote/:id</td>
												<td>increments downvote count of specified post and return home page</td>
											</tr>
											<tr>
												<td>Add Comment</td>
												<td>POST</td>
												<td>http://esof423.cs.montana.edu:4013/add</td>
												<td>Adds comment to database and returns home page. Required fields are Comment, User_id, and Post_ID</td>
											</tr>
											<tr>
												<td>Delete</td>
												<td>GET</td>
												<td>http://esof423.cs.montana.edu:4013/delete/:id</td>
												<td>Deletes Post based on required id and returns home page</td>
											</tr>
										</tbody>
									</table>
								  </body>
							</section> -->

						<!-- Second Section -->
							<section id="second" class="main special">
								<header class="major">
									<h2>Developer Documentation</h2>
									<p>The commenting function is modelled after the Reddit commenting Functions
										allowing for infinite nesting of comments built with the Adonis framework. Below is a
										list of the files developed/edited specificially for this project and what make it unique.
										Remaining files can be assumed to be unedited, and apart of the Adonis framework.</p>
										<p> Files and their functions: </p>

											<br>

											<ul>
											<li> ../app/Controllers/CommentController.js:
													The comment controller file contains all of the
													the implementation of the functions required within the API</li>

													<p style="margin-left: 40px"> The 'index' function within this file is
						              being utilized in order to display the comments from the database</p>

						              <br>

						              <p style="margin-left: 40px"> 'store' works as the function to actually update
						              the databased once a user has submitted a comment. </p>

						              <br>

						              <p style="margin-left: 40px"> 'frompost' returns all of the comments that have
						              been posted, displaying them on the website</p>

						              <br>

						              <p style="margin-left: 40px"> 'frompost2' in the sorting structure in order to
						              search for comments based upon their ranking by either low to high or high to low, then by
						              the time the comment was posted in either chronological, or reversed chronological order</p>

						              <br>

						              <p style="margin-left: 40px"> 'destroy' is the delete function for the API, and updates the
						              database by removing the comment and the post id associated with it. </p>

						              <br>

						              <p style="margin-left: 40px"> The 'edit' and 'update' functions work as a way
						                to be brought to the edit page to make any desired changes to your comment,
						                and then the update function is what allows the database to be updated. The
						                'update' function works the same for when users add new comments</p>

						              <br>

						              <p style="margin-left: 40px"> The two functions 'upvote' and 'downvote' are
						                utilized to update the rank of the comment. Each new comment that's added
						                starts with a score of 0, but once posted other user's will be able update
						                the ranking. </p>

						              <br>

						              <p style="margin-left: 40px"> 'get_posts' is what accesses the database in
						                the 'index' function to operate. </p>

						              <br>
											<li> ../database/1613762106104_posts_schema.js:
													Contains the structure of the DB with each of the
													required fields for the user to successfully posts
													a comment. In order to update the DB, developers need
													to run the command, adonis migration:run, in order to add or
													or remove a field. </li>
													<br>

											<li> ../resources/views/layouts/add.edge:
													Contains the form for user input when posting a new comment. </li>
													<br>

											<li> ../layouts/edit.edge:
													Clone of the add file in order to allow users to update/edit
													their comments. </li>
													<br>

												<li> ../layouts/main.edge:
													Navigation for site </li>
													<br>

												<li> ../views/database.edge:
													Forms for user input in order to gather necessary information
													to make a post. </li>
													<br>

												<li> ../views/dev.edge:
													Developer documentation page. </li>
													<br>

												<li> ../views/user.edge:
													User documentation page. </li>
													<br>

												<li> ../views/welcome.edge:
													Landing page. </li>
													<br>

												<li> Github link: https://github.com/WesRobbins/AdonisStart </li>
																		</header>



							</section>

						<!-- Get Started -->
							<section id="third" class="main special">
								<header class="major">
									<h2>Comment API Database</h2>

								</header>

									<h2>Add Comment</h2>
									<form action="{{ route('CommentController.store') }}" method="POST">
										{{ csrfField() }}
										<div class="form-group">
										<label>User ID</label>
										<input type="text" name="User_ID" class="form-control" placeholder="User ID" value="{{ old('title', '') }}">
										{{ elIf('<span class="text-danger">$self</span>', getErrorFor('title'), hasErrorFor('title')) }}
										</div>
										<div class="form-group">
										<label>Post ID</label>
										<input type="text" name="Post_ID" class="form-control" placeholder="Post ID" value="{{ old('title', '') }}">
										{{ elIf('<span class="text-danger">$self</span>', getErrorFor('title'), hasErrorFor('title')) }}
										</div>
										<div class="form-group">
										<label>Comment Body</label>
										<textarea name="Comment" class="form-control" placeholder="Comment">{{ old('body', '') }}</textarea>
										{{ elIf('<span class="text-danger">$self</span>', getErrorFor('body'), hasErrorFor('body')) }}
										</div>
										<button class="btn btn-primary" type="submit">Submit</button>
									</form>
									<h1>All Comments in Database</h1>

									<table class="table">
									  <thead>
									    <tr>
									      <th scope="col">Date</th>
									      <th scope="col">Comment ID</th>
									      <th scope="col">Post ID</th>
									      <th scope="col">Comment</th>
												<th scope="col">Votes</th>
									    </tr>
									  </thead>
									  <tbody>
											@each(com in posts)
									    <tr>
									      <!-- <th scope="row"></th> -->
									      <td>{{ com.updated_at }}</td>
									      <td>{{ com.id }}</td>
												<td>{{ com.Post_ID }}</td>
									      <td>{{ com.Comment }}</td>
												<td>{{ com.upvotes - com.downvotes }}</td>
												<!-- <td><button class="btn btn-primary" type="button">Delete</button> -->
												<!-- <td><button onclick="{{ route('CommentController.destroy', { id: com.Post_ID }) }}">Delete</button> -->
												<td><a href="/delete/{{ com.id }}" class="btn btn-primary">Delete</a></td>

												<td><a href="{{ route('CommentController.edit', { id: com.id }) }}" class="btn btn-primary">Edit</a></td>
												<td><a href="{{ route('CommentController.upvote', { id: com.id }) }}" class="btn btn-primary">Upvote</a></td>
												<td><a href="{{ route('CommentController.downvote', { id: com.id }) }}" class="btn btn-primary">Downvote</a></td>
									    </tr>
											@endeach

									  </tbody>
									</table>

									<h1>Comments From Selected Post</h1>
									<form action="{{ route('CommentController.frompost2') }}" method="POST">
										{{ csrfField() }}
										<div class="form-group">
										<label>Sorting Options</label>
										<select name="sort">
										  <option value="1">Most Popular First</option>
										  <option value="2">Most Disliked First</option>
										  <option value="3">Most Recent First</option>
											<option value="4">Oldest First</option>

										</select>
									</div>
										<div class="form-group">
										<label>Enter identifier</label>
										<input type="text" name="postID" display ="inline" class="form-control" placeholder="Post ID" value="{{ old('title', '') }}">
										{{ elIf('<span class="text-danger">$self</span>', getErrorFor('title'), hasErrorFor('title')) }}
										</div>
										<button class="btn btn-primary" type="submit">Get Comments</button>
									</form>
									<h2>{{ title }}</h2>
									<table class="table table-striped table-dark">
										<thead>
											<tr>
												<th scope="col">Date</th>
												<th scope="col">Comment ID</th>
												<th scope="col">Post ID</th>
												<th scope="col">Comment</th>
												<th scope="col">Votes</th>
											</tr>
										</thead>
										<tbody>
											@each(com in from_post)
											<tr>
												<!-- <th scope="row"></th> -->
												<td>{{ com.updated_at }}</td>
												<td>{{ com.id }}</td>
												<td>{{ com.Post_ID }}</td>
												<td>{{ com.Comment }}</td>
												<td>{{ com.upvotes - com.downvotes }}</td>
												<!-- <td><button class="btn btn-primary" type="button">Delete</button> -->
												<!-- <td><button onclick="{{ route('CommentController.destroy', { id: com.Post_ID }) }}">Delete</button> -->
												<td><a href="/delete/{{ com.id }}" class="btn btn-primary">Delete</a></td>
													<!-- <form action="{{ route('CommentController.destroy', { id: com.Post_ID }) }}" method="POST"></td> -->
												<td><button class="btn btn-primary" type="button">Edit</button>

												<td><a href="{{ route('CommentController.upvote', { id: com.id }) }}" class="btn btn-primary">Upvote</a></td>
												<td><a href="{{ route('CommentController.downvote', { id: com.id }) }}" class="btn btn-primary">Downvote</a></td>
											</tr>
											@endeach

										</tbody>
									</table>
									<h1>Structured Comments From Post</h1>
									<form action="{{ route('CommentController.frompost3') }}" method="POST">
										{{ csrfField() }}
										<div class="form-group">
										<label>Enter identifier</label>
										<input type="text" name="postID" display ="inline" class="form-control" placeholder="Post ID" value="{{ old('title', '') }}">
										{{ elIf('<span class="text-danger">$self</span>', getErrorFor('title'), hasErrorFor('title')) }}
										</div>
										<button class="btn btn-primary" type="submit">Get Comments</button>
									</form>
									<table class="table table-striped table-dark">
										<thead>
											<tr>
												<th scope="col">Date</th>
												<th scope="col">Comment ID</th>
												<th scope="col">Post ID</th>
												<th scope="col">Comment</th>
												<th scope="col">Votes</th>
											</tr>
										</thead>
										<tbody>
											@each(com in structured)
											<tr>
												<!-- <th scope="row"></th> -->
												<td>{{ com.updated_at }}</td>
												<td>{{ com.id }}</td>
												<td>{{ com.Post_ID }}</td>
												<td>{{ com.Comment }}</td>
												<td>{{ com.upvotes - com.downvotes }}</td>
												<!-- <td><button class="btn btn-primary" type="button">Delete</button> -->
												<!-- <td><button onclick="{{ route('CommentController.destroy', { id: com.Post_ID }) }}">Delete</button> -->
												<td><a href="/delete/{{ com.id }}" class="btn btn-primary">Delete</a></td>
													<!-- <form action="{{ route('CommentController.destroy', { id: com.Post_ID }) }}" method="POST"></td> -->
												<td><button class="btn btn-primary" type="button">Edit</button>

												<td><a href="{{ route('CommentController.upvote', { id: com.id }) }}" class="btn btn-primary">Upvote</a></td>
												<td><a href="{{ route('CommentController.downvote', { id: com.id }) }}" class="btn btn-primary">Downvote</a></td>
											</tr>
											@endeach

										</tbody>
									</table>


							</section>

					</div>

				<!-- Footer -->
					<footer id="footer">
						<section>
							</dl>
							<ul class="icons">
								<li><a href="https://github.com/WesRobbins/AdonisStart" class="icon brands fa-github alt"><span class="label">GitHub</span></a></li>
							</ul>
						</section>
						<p class="copyright">&copy; Untitled. Design: <a href="https://html5up.net">HTML5 UP</a>.</p>
					</footer>

			</div>

		<!-- Scripts -->
			<script src="assets/js/jquery.min.js"></script>
			<script src="assets/js/jquery.scrollex.min.js"></script>
			<script src="assets/js/jquery.scrolly.min.js"></script>
			<script src="assets/js/browser.min.js"></script>
			<script src="assets/js/breakpoints.min.js"></script>
			<script src="assets/js/util.js"></script>
			<script src="assets/js/main.js"></script>

	</body>
</html>
